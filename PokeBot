from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from fake_useragent import UserAgent
import time
import random

# Configuration
PRODUCT_URL = "https://www.pokemoncenter.com/product/100-10653/pokemon-tcg-scarlet-and-violet-destined-rivals-pokemon-center-elite-trainer-box"
MAX_RETRIES = 1  # Max purchase attempts
RETRY_DELAY = 30  # Seconds between attempts

def attempt_purchase():
    """Attempts to purchase the item immediately"""
    driver = None
    try:
        # Configure browser
        ua = UserAgent()
        options = webdriver.ChromeOptions()
        options.add_argument(f"user-agent={ua.random}")
        # options.add_argument("--headless")  # Uncomment to run in background
        
        driver = webdriver.Chrome(
            service=Service(ChromeDriverManager().install()),
            options=options
        )
        
        # Navigate to product page
        print("Loading product page...")
        driver.get(PRODUCT_URL)
        time.sleep(random.uniform(2, 5))  # Random delay
        
        # Check if product is in stock
        print("Checking stock status...")
        add_to_cart = driver.find_element(By.CSS_SELECTOR, "button.add-to-cart")
        if "disabled" in add_to_cart.get_attribute("class"):
            print("❌ Product is out of stock")
            return False
        
        # Add to cart
        print("Adding to cart...")
        add_to_cart.click()
        time.sleep(random.uniform(1, 3))
        
        # Proceed to checkout
        print("Proceeding to checkout...")
        driver.find_element(By.CSS_SELECTOR, "a.checkout-btn").click()
        time.sleep(3)
        
        # IMPORTANT: Add your login/payment steps here
        # This is where you would typically:
        # 1. Enter login credentials
        # 2. Fill shipping information
        # 3. Enter payment details
        # 4. Place order
        
        print("✅ Purchase successful!")
        return True
        
    except Exception as e:
        print(f"❌ Purchase failed: {str(e)[:100]}...")  # Truncate long error messages
        return False
    finally:
        if driver:
            driver.quit()

def main():
    retry_count = 0
    while retry_count < MAX_RETRIES:
        print(f"\nAttempt #{retry_count + 1} of {MAX_RETRIES}")
        if attempt_purchase():
            break
        retry_count += 1
        if retry_count < MAX_RETRIES:
            print(f"Waiting {RETRY_DELAY} seconds before retry...")
            time.sleep(RETRY_DELAY)
    
    if retry_count >= MAX_RETRIES:
        print("⚠️ Maximum purchase attempts reached. Giving up.")

if __name__ == "__main__":
    main()